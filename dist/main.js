(()=>{var t={146:(t,e,s)=>{const{Ship:r,isGameOver:n,Board:o,Player:i,ComputerPlayer:l,placeShipsRandomly:c}=s(487);document.addEventListener("DOMContentLoaded",(function(){const e=new i("User"),s=new l("Computer"),r="user-board-container",h="computer-board-container",a="turn-display-container",u=new o(10),d=new o(10);function p(t,e,s){const r=document.getElementById(e);r.innerHTML="",r.removeEventListener("click",s);for(let e=0;e<t.size;e++)for(let n=0;n<t.size;n++){const t=document.createElement("div");t.classList.add("grid-cell"),t.dataset.row=e,t.dataset.col=n,t.addEventListener("click",(()=>{s(e,n)})),r.appendChild(t)}}function g(t,s){if(e.turn){console.log(`User board clicked at ${t}, ${s}`);const r=e.playerAttack(d,t,s),n=d.getShipAt(t,s);console.log(`Attack result: ${r}, Ship:`,n),S(d,h,!1),w(a,r?"Hit!":"Miss!"),document.querySelectorAll(".grid-cell").forEach((t=>{t.removeEventListener("click",g),t.removeEventListener("click",m)})),setTimeout((()=>{f()}),1e3)}}function m(t,e){console.log("Ignoring computer board click")}function f(){console.log("handleTurnEnd called"),e.turn?(e.turn=!1,s.turn=!0,setTimeout((()=>{C()}),1e3)):s.turn&&(s.turn=!1,e.turn=!0,setTimeout((()=>{w(a,"")}),1e3),(n(u.ships)||n(d.ships))&&(console.log("Game is over. Calling handleGameOver..."),k(n(u.ships)?"Computer":"User")))}function k(t){console.log(`handleGameOver function called with winner: ${t}`),w(a,`Game Over! ${t} wins!`),setTimeout((()=>{y()}),3e3)}function y(){e.turn=!0,u.reset(),d.reset(),c(u,v,T),c(d,v,T),S(u,r,!0),S(d,h,!1),w(a,""),console.log("Initial turn: "+(e.turn?"User":"Computer"))}function C(){if(s.turn){const t=s.computerAttack(u),e=t&&"Hit"===t.result?u.getShipAt(t.row,t.col):null;console.log("Computer attack result:",t.result,"Ship:",e),S(u,r,!0,t.row,t.col),w(a,t.result),setTimeout((()=>{f()}),1e3)}}function S(t,s,r){const n=document.getElementById(s);n.innerHTML="";for(let s=0;s<t.size;s++)for(let o=0;o<t.size;o++){const i=document.createElement("div");i.classList.add("grid-cell"),i.dataset.row=s,i.dataset.col=o,1===t.grid[s][o]&&r?i.classList.add("ship"):"X"===t.grid[s][o]?i.classList.add("hit"):"O"===t.grid[s][o]&&i.classList.add("miss"),(r&&e.turn||!r&&e.turn)&&i.addEventListener("click",(()=>{g(s,o)})),n.appendChild(i)}}function w(t,e){document.getElementById(t).textContent=e}function y(){e.turn=!0,u.reset(),d.reset(),c(u,v,T),c(d,v,T),S(u,r,!0),S(d,h,!1),w(a,""),console.log("Initial turn: "+(e.turn?"User":"Computer"))}e.turn=!0,document.getElementById("randomize-button").addEventListener("click",y),console.log("Initial turn: "+(e.turn?"User":"Computer")),p(u,r,g),p(d,h,m);const v=5,T=2;c(u,"User"),c(d,"Computer"),S(u,r,!0),S(d,h,!1),t.exports={handleComputerBoardClick:m,handleComputerTurn:C,handleGameOver:k,handleTurnEnd:f,handleUserBoardClick:g,updateBoardDisplay:S,updateTurnDisplay:w,resetGame:y,createBoardGrid:p}}))},487:t=>{class e{constructor(t,e){this.length=t,this.hits=0,this.sunk=!1,this.owner=e,this.startRow=null,this.endRow=null,this.startCol=null,this.endCol=null,this.currentPlayerIndex=0}hit(){return console.log(`Hits before hit: ${this.hits}`),this.hits<this.length&&this.hits++,console.log(`Hits after hit: ${this.hits}`),this.hits===this.length&&(this.sunk=!0,console.log("Ship sunk!")),this.hits}isSunk(){return this.hits===this.length}equals(t){return this.length===t.length&&this.owner===t.owner&&this.startRow===t.startRow&&this.startCol===t.startCol&&this.endRow===t.endRow&&this.endCol===t.endCol}}class s{constructor(t){this.size=t,this.grid=Array.from({length:t},(()=>Array(t).fill(0))),this.ships=[],this.players=[i,l],this.players[0].turn=!0,this.currentPlayer=i,this.currentPlayerIndex=0,this.shipSunkThisTurn=[!1,!1]}resetShipSunkThisTurn(){this.shipSunkThisTurn=[!1,!1]}markShipAsSunkThisTurn(t){this.shipSunkThisTurn[t]=!0}isShipSunkThisTurn(t){return this.shipSunkThisTurn[t]}placeShip(t,e,s,r){const n=this.getShipVertices(t,e,s,r);if(this.isShipPlacementValid(n)){t.startRow=e,t.startCol=s,"horizontal"===r?(t.endRow=e,t.endCol=s+t.length-1):(t.endRow=e+t.length-1,t.endCol=s);for(const t of n){const[e,s]=this.getCoordinates(t);this.grid[e][s]=1}return this.ships.push(t),!0}return!1}getShipAt(t,e){for(const s of this.ships)if(t>=s.startRow&&t<=s.endRow&&e>=s.startCol&&e<=s.endCol)return s;return null}getShipVertices(t,e,s,r){const n=[];if("horizontal"===r)for(let r=0;r<t.length;r++){const t=this.getVertex(e,s+r);n.push(t)}else if("vertical"===r)for(let r=0;r<t.length;r++){const t=this.getVertex(e+r,s);n.push(t)}else for(let r=0;r<t.length;r++){const t=this.getVertex(e,s+r);n.push(t)}return console.log(`Ship vertices for cell (${e}, ${s}):`,n),n}isShipPlacementValid(t){for(const e of t){const[t,s]=this.getCoordinates(e);if(t<0||t>=this.size||s<0||s>=this.size||0!==this.grid[t][s])return!1}return!0}receiveAttack(t,e){console.log(`Received attack at ${t}, ${e}`);const s=this.grid[t][e];if(console.log(`Cell value: ${s}`),1===s){this.grid[t][e]="X";const s=this.getShipAt(t,e);if(s&&!s.isSunk())return s.hit(),s.isSunk()?console.log("Ship is sunk!"):console.log(`Ship is not sunk. Hits: ${s.hits}, Length: ${s.length}`),0===s.currentPlayerIndex?i.playerAttack(this,t,e,"User"):l.playerAttack(this,t,e,"Computer"),!0;console.log("Ship not found or already sunk for the attacked cell.")}else"O"!==s&&"X"!==s&&(this.grid[t][e]="O");return!1}switchTurn(){console.log(`Before switchTurn - currentPlayerIndex: ${this.currentPlayerIndex}`),this.currentPlayerIndex=1-this.currentPlayerIndex,console.log(`After switchTurn - currentPlayerIndex: ${this.currentPlayerIndex}`),this.players.forEach(((t,e)=>{t.turn=e===this.currentPlayerIndex,console.log(`${t.name}'s turn: ${t.turn}`)})),this.currentPlayer=this.players[this.currentPlayerIndex]}isPlayerTurn(){return 0===this.currentPlayerIndex}getCoordinates(t){return[Math.floor(t/this.size),t%this.size]}getVertex(t,e){return t*this.size+e}printGrid(){let t="";for(let e=0;e<this.size;e++){for(let s=0;s<this.size;s++)t+=`${this.grid[e][s]} `;t+="\n"}return t}printBoard(){let t="";for(let e=0;e<this.size;e++){for(let s=0;s<this.size;s++)t+=`${this.grid[e][s]} `;t+="\n"}console.log(t)}reset(){this.grid=Array.from({length:this.size},(()=>Array(this.size).fill(0))),this.ships=[],this.currentPlayer=null,this.currentPlayerIndex=0}}class r{constructor(t){this.name=t,this.turn=!1,this.ships=[]}playerAttack(t,e,s){console.log(`${this.name}'s attack: ${e}, ${s}`);const r=t.receiveAttack(e,s);return r?console.log("Successful attack!"):console.log("Attack missed."),r}}class n extends r{constructor(t){super(t)}computerAttack(t){let e;const s=Math.floor(Math.random()*t.size),r=Math.floor(Math.random()*t.size),n=t.receiveAttack(s,r);return e={success:n,row:s,col:r,ship:n?t.getShipAt(s,r):null},console.log("Computer attack result:",e),n?console.log("Successful attack!"):console.log("Attack missed."),e}}function o(t,s){[5,4,3,3,2].forEach((r=>{let n=!1;for(;!n;){const o=Math.floor(Math.random()*t.size),i=Math.floor(Math.random()*t.size),l=Math.random()<.5?"horizontal":"vertical",c=new e(r,s);t.placeShip(c,o,i,l)&&(n=!0)}}))}const i=new r("User"),l=new n("Computer"),c=new s(10),h=new s(10);c.currentPlayer=i,h.currentPlayer=l,o(h,"Computer"),i.ships=c.ships,l.ships=h.ships,console.log("User Board:"),console.log(c.printGrid()),console.log("\nComputer Board:"),console.log(h.printGrid()),t.exports={Ship:e,Board:s,Player:r,ComputerPlayer:n,placeShipsRandomly:o,isGameOver:function(t){console.log("Checking if game is over...");let e=5,s=5;const r=new Set;return t.forEach((t=>{t.isSunk()&&!r.has(t)&&(console.log(`Ship sunk. Owner: ${t.owner}`),r.add(t),"User"===t.owner?(e--,console.log("User ship sunk. Remaining:",e)):"Computer"===t.owner&&(s--,console.log("Computer ship sunk. Remaining:",s)))})),console.log("User ships remaining:",e),console.log("Computer ships remaining:",s),e<=0||s<=0}}}},e={};!function s(r){var n=e[r];if(void 0!==n)return n.exports;var o=e[r]={exports:{}};return t[r](o,o.exports,s),o.exports}(146)})();